// MentalSpace EHR V2 - Prisma Schema
// Based on comprehensive PRD documentation

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// PHASE 1: USER MANAGEMENT & AUTHENTICATION
// ============================================================================

enum UserRole {
  ADMINISTRATOR
  SUPERVISOR
  CLINICIAN
  BILLING_STAFF
  FRONT_DESK
  ASSOCIATE
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  password      String // bcrypt hashed
  firstName     String
  middleName    String?
  lastName      String
  suffix        String?
  preferredName String?
  roles         UserRole[] // Multiple roles support

  // Professional Information
  title             String? // PhD, PsyD, LCSW, etc.
  licenseNumber     String?
  licenseState      String?
  licenseExpiration DateTime?
  npiNumber         String?
  deaNumber         String?
  taxonomyCode      String?

  // Credentials
  credentials     String[] // Array of credentials
  specialties     String[]
  languagesSpoken String[]

  // Client-Facing Profile (for portal)
  profileBio          String?
  profilePhotoS3      String? // S3 URL for profile photo
  yearsOfExperience   Int?
  education           String[] // Array of degrees ["PhD in Clinical Psychology, Harvard 2015", "MA in Psychology, UCLA 2010"]
  approachesToTherapy String[] // ["CBT", "DBT", "EMDR", "Psychodynamic"]
  treatmentPhilosophy String?

  // Supervision
  isUnderSupervision        Boolean   @default(false)
  supervisorId              String?
  supervisor                User?     @relation("Supervision", fields: [supervisorId], references: [id])
  supervisees               User[]    @relation("Supervision")
  supervisionStartDate      DateTime?
  supervisionEndDate        DateTime?
  requiredSupervisionHours  Int?
  completedSupervisionHours Float?

  isSupervisor        Boolean  @default(false)
  supervisionLicenses String[]

  // Contact
  phoneNumber           String?
  officeExtension       String?
  personalEmail         String?
  emergencyContactName  String?
  emergencyContactPhone String?

  // Practice Settings
  defaultOfficeLocation  String?
  availableForScheduling Boolean @default(true)
  acceptsNewClients      Boolean @default(true)

  // Notifications
  emailNotifications   Boolean @default(true)
  smsNotifications     Boolean @default(false)
  appointmentReminders Boolean @default(true)
  noteReminders        Boolean @default(true)
  supervisoryAlerts    Boolean @default(true)

  // Billing
  defaultRate       Decimal? @db.Decimal(10, 2)
  hourlyPayrollRate Decimal? @db.Decimal(10, 2)
  taxId             String?

  // Account Status
  isActive      Boolean   @default(true)
  mfaEnabled    Boolean   @default(false)
  lastLoginDate DateTime?

  // Password Management
  mustChangePassword     Boolean   @default(false)
  passwordResetToken     String?   @unique
  passwordResetExpiry    DateTime?
  emailVerified          Boolean   @default(true) // Default true for staff (manual creation)
  emailVerificationToken String?   @unique
  invitationSentAt       DateTime?
  invitationToken        String?   @unique

  // Signature
  digitalSignature String? // base64
  signatureDate    DateTime?

  // Phase 1.4: Signature Authentication
  signaturePin       String? // Encrypted 4-6 digit PIN
  signaturePassword  String? // Separate from login password (hashed)
  signatureBiometric String? // Fingerprint hash (future)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clinicalNotesCreated    ClinicalNote[]        @relation("NoteCreator")
  clinicalNotesCosigned   ClinicalNote[]        @relation("NoteCosigner")
  appointmentsAsClinician Appointment[]         @relation("AppointmentClinician")
  supervisionSessions     SupervisionSession[]  @relation("SupervisionSessionSupervisor")
  superviseeSessions      SupervisionSession[]  @relation("SupervisionSessionSupervisee")
  supervisionHoursLogs    SupervisionHoursLog[]
  clientsAsTherapist      Client[]              @relation("ClientTherapist")

  // Productivity Module Relations (Phase 6)
  productivityMetrics ProductivityMetric[] @relation("ProductivityMetrics")
  alertsAsTarget      ComplianceAlert[]    @relation("AlertTarget")
  alertsAsSupervisor  ComplianceAlert[]    @relation("AlertSupervisor")
  alertsAsAdmin       ComplianceAlert[]    @relation("AlertAdmin")
  performanceGoals    PerformanceGoal[]    @relation("PerformanceGoals")

  // Phase 1.4: Electronic Signatures
  signatureEvents SignatureEvent[] @relation("UserSignatureEvents")

  // Phase 1.5: Amendment History
  amendments      NoteAmendment[] @relation("UserAmendments")
  versionsCreated NoteVersion[]   @relation("VersionCreator")

  // Client Portal Integration (Phase 9) - Therapist/Admin interactions
  sessionReviewsReceived      SessionReview[]          @relation("SessionReviewClinician")
  therapistChangeRequestsFrom TherapistChangeRequest[] @relation("ChangeRequestCurrentClinician")
  therapistChangeRequestsTo   TherapistChangeRequest[] @relation("ChangeRequestNewClinician")
  dailyPromptsCreated         DailyPrompt[]            @relation("DailyPromptCreator")
  resourcesCreated            Resource[]               @relation("ResourceCreator")
  resourceAssignments         ResourceAssignment[]     @relation("ResourceAssigner")
  crisisToolkitsManaged       CrisisToolkit[]          @relation("CrisisToolkitManager")
  audioMessagesCreated        AudioMessage[]           @relation("AudioMessageCreator")
  homeworkAssigned            HomeworkAssignment[]     @relation("HomeworkAssigner")
  therapeuticGoalsCreated     TherapeuticGoal[]        @relation("GoalCreator")
  goalProgressUpdates         GoalProgressUpdate[]     @relation("GoalUpdater")
  winCommentsPosted           WinComment[]             @relation("WinCommenter")
  journalCommentsPosted       JournalComment[]         @relation("JournalCommenter")
  sessionSummariesCreated     SessionSummary[]         @relation("SessionSummaryCreator")
  scheduledCheckInsCreated    ScheduledCheckIn[]       @relation("CheckInCreator")

  // Clinical Notes Business Rules
  diagnosisHistoryEntries DiagnosisHistory[] @relation("DiagnosisHistoryUser")

  @@map("users")
}

// ============================================================================
// PRACTICE SETTINGS & CONFIGURATION
// ============================================================================

model PracticeSettings {
  id String @id @default(uuid())

  // General Practice Information
  practiceName       String
  practiceEmail      String
  practicePhone      String
  practiceWebsite    String?
  practiceLogo       String? // URL to logo image
  timezone           String   @default("America/New_York")
  businessHoursStart String   @default("09:00")
  businessHoursEnd   String   @default("17:00")
  businessDays       String[] @default(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"])

  // Address
  addressStreet1 String
  addressStreet2 String?
  addressCity    String
  addressState   String
  addressZipCode String

  // Clinical Documentation Settings
  defaultNoteDueDays            Int     @default(3) // Days after session to complete note
  requireCosignForAssociates    Boolean @default(true)
  enableAutoLockout             Boolean @default(true) // Sunday lockout feature
  lockoutDay                    String  @default("Sunday")
  lockoutTime                   String  @default("23:59")
  enableNoteReminders           Boolean @default(true)
  noteReminderSchedule          Int[]   @default([2, 1, 0]) // Days before due date
  allowLateNoteCompletion       Boolean @default(false)
  requireSignatureForCompletion Boolean @default(true)

  // Scheduling Settings
  defaultAppointmentDuration  Int      @default(50) // minutes
  enableOnlineBooking         Boolean  @default(false)
  enableWaitlist              Boolean  @default(true)
  enableRecurringAppointments Boolean  @default(true)
  cancellationNoticePeriod    Int      @default(24) // hours
  enableCancellationFees      Boolean  @default(false)
  cancellationFeeAmount       Decimal? @db.Decimal(10, 2)
  noShowFeeAmount             Decimal? @db.Decimal(10, 2)
  bufferBetweenAppointments   Int      @default(10) // minutes
  maxAdvanceBookingDays       Int      @default(90)

  // Billing Settings
  defaultCurrency               String   @default("USD")
  taxRate                       Decimal  @default(0) @db.Decimal(5, 2)
  enableInsuranceBilling        Boolean  @default(true)
  enableSelfPayBilling          Boolean  @default(true)
  requirePaymentAtTimeOfService Boolean  @default(false)
  acceptedPaymentMethods        String[] @default(["Cash", "Credit Card", "Check", "Insurance"])
  lateFeeEnabled                Boolean  @default(false)
  lateFeeAmount                 Decimal? @db.Decimal(10, 2)
  lateFeeDaysAfterDue           Int      @default(30)
  invoicePrefix                 String   @default("INV")
  invoiceStartingNumber         Int      @default(1000)

  // Compliance Settings
  hipaaComplianceEnabled Boolean @default(true)
  requireTwoFactorAuth   Boolean @default(false)
  passwordExpirationDays Int     @default(90)
  sessionTimeoutMinutes  Int     @default(30)
  enableAuditLogging     Boolean @default(true)
  dataRetentionYears     Int     @default(7)
  enableAutoBackup       Boolean @default(true)
  backupFrequency        String  @default("Daily") // Daily, Weekly, Monthly
  requireConsentForms    Boolean @default(true)
  enableClientPortal     Boolean @default(true)

  // Telehealth Settings
  enableTelehealth              Boolean @default(true)
  telehealthPlatform            String  @default("Built-in") // Built-in, Zoom, etc.
  requireConsentForTelehealth   Boolean @default(true)
  recordTelehealthSessions      Boolean @default(false)
  telehealthRecordingDisclosure String?

  // Supervision Settings
  enableSupervision           Boolean @default(true)
  requiredSupervisionHours    Int     @default(3000)
  supervisionSessionFrequency String  @default("Weekly") // Weekly, Biweekly, Monthly
  enableGroupSupervision      Boolean @default(true)
  enableTriadicSupervision    Boolean @default(true)

  // AI Integration Settings
  enableAIFeatures             Boolean @default(false)
  aiProvider                   String? // "OpenAI", "Anthropic", "Custom"
  aiModel                      String? // "gpt-4", "claude-3", etc.
  // DEPRECATED: Do not store API keys in database. Use AWS Secrets Manager instead.
  // This field is kept only for backward compatibility and should remain NULL.
  aiApiKey                     String? // DEPRECATED - Use Secrets Manager
  enableAINoteGeneration       Boolean @default(false)
  enableAITreatmentSuggestions Boolean @default(false)
  enableAIScheduling           Boolean @default(false)
  enableAIDiagnosisAssistance  Boolean @default(false)
  aiConfidenceThreshold        Decimal @default(0.8) @db.Decimal(3, 2)
  requireHumanReview           Boolean @default(true)
  aiUsageLogging               Boolean @default(true)

  // Email Notification Settings
  smtpHost                   String?
  smtpPort                   Int?
  smtpSecure                 Boolean @default(true)
  smtpUser                   String?
  // DEPRECATED: Do not store passwords in database. Use AWS Secrets Manager instead.
  // This field is kept only for backward compatibility and should remain NULL.
  smtpPass                   String? // DEPRECATED - Use Secrets Manager
  emailFromName              String?
  emailFromAddress           String?
  enableAppointmentReminders Boolean @default(true)
  enableBillingReminders     Boolean @default(true)
  enableSystemNotifications  Boolean @default(true)

  // Client Portal Settings
  portalRequireEmailVerification Boolean @default(true)
  portalEnableAppointmentBooking Boolean @default(true)
  portalEnableBilling            Boolean @default(true)
  portalEnableMessaging          Boolean @default(true)
  portalEnableDocuments          Boolean @default(true)
  portalEnableMoodTracking       Boolean @default(true)
  portalEnableAssessments        Boolean @default(true)

  // Reporting Settings
  enableProductivityReports  Boolean @default(true)
  enableFinancialReports     Boolean @default(true)
  enableComplianceReports    Boolean @default(true)
  reportDistributionEmail    String?
  autoGenerateMonthlyReports Boolean @default(false)

  // Feature Flags
  enableBetaFeatures      Boolean @default(false)
  enableExperimentalAI    Boolean @default(false)
  enableAdvancedAnalytics Boolean @default(false)

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastModifiedBy String

  @@map("practice_settings")
}

// ============================================================================
// PHASE 2: CLIENT MANAGEMENT & DEMOGRAPHICS
// ============================================================================

enum ClientStatus {
  ACTIVE
  INACTIVE
  DISCHARGED
  DECEASED
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

model Client {
  id                  String @id @default(uuid())
  medicalRecordNumber String @unique

  // Personal Information
  firstName     String
  middleName    String?
  lastName      String
  suffix        String?
  previousNames String[]
  preferredName String?
  pronouns      String?

  // Date of Birth
  dateOfBirth DateTime

  // Contact Information
  primaryPhone           String
  primaryPhoneType       String  @default("Mobile")
  secondaryPhone         String?
  secondaryPhoneType     String?
  email                  String?
  preferredContactMethod String  @default("Phone")
  okayToLeaveMessage     Boolean @default(true)

  // Address
  addressStreet1     String
  addressStreet2     String?
  addressCity        String
  addressState       String
  addressZipCode     String
  addressCounty      String?
  isTemporaryAddress Boolean   @default(false)
  temporaryUntil     DateTime?

  // Mailing Address (if different)
  mailingStreet1 String?
  mailingStreet2 String?
  mailingCity    String?
  mailingState   String?
  mailingZipCode String?

  // Demographics
  gender              Gender
  genderIdentity      String?
  sexAssignedAtBirth  String?
  sexualOrientation   String?
  maritalStatus       String?
  race                String[]
  ethnicity           String?
  primaryLanguage     String   @default("English")
  otherLanguages      String[]
  needsInterpreter    Boolean  @default(false)
  interpreterLanguage String?
  religion            String?

  // Social Information
  education         String?
  employmentStatus  String?
  occupation        String?
  employer          String?
  livingArrangement String?
  housingStatus     String?

  // Veteran Status
  isVeteran             Boolean @default(false)
  militaryBranch        String?
  militaryDischargeType String?

  // Legal
  legalStatus          String?
  guardianName         String?
  guardianPhone        String?
  guardianRelationship String?

  // Account Status
  status           ClientStatus @default(ACTIVE)
  statusDate       DateTime     @default(now())
  registrationDate DateTime     @default(now())
  dischargeDate    DateTime?
  dischargeReason  String?
  deceasedDate     DateTime?

  // Assignment
  primaryTherapistId String
  primaryTherapist   User    @relation("ClientTherapist", fields: [primaryTherapistId], references: [id])
  psychiatristId     String?
  caseManagerId      String?

  // Consents
  treatmentConsent         Boolean   @default(false)
  treatmentConsentDate     DateTime?
  hipaaAcknowledgment      Boolean   @default(false)
  hipaaAcknowledgmentDate  DateTime?
  releaseOfInformation     Boolean   @default(false)
  releaseOfInformationDate DateTime?
  electronicCommunication  Boolean   @default(false)
  appointmentReminders     Boolean   @default(true)
  photographyConsent       Boolean   @default(false)

  // Special Needs
  specialNeeds       String?
  accessibilityNeeds String[]
  allergyAlerts      String[]

  // Previous System
  previousMRN        String?
  previousSystemName String?

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  // Relations
  emergencyContacts  EmergencyContact[]
  legalGuardians     LegalGuardian[]
  insuranceInfo      InsuranceInformation[]
  appointments       Appointment[]
  clinicalNotes      ClinicalNote[]
  treatmentPlans     TreatmentPlan[]
  diagnoses          Diagnosis[]
  medications        Medication[]
  documents          ClientDocument[]
  charges            ChargeEntry[]
  payments           PaymentRecord[]
  statements         ClientStatement[]
  portalAccount      PortalAccount?
  telehealthConsents TelehealthConsent[]

  // Client Portal Relations (Phase 9) - Client-generated data visible to therapist
  insuranceCards          InsuranceCard[]
  paymentMethods          PaymentMethod[]
  formAssignments         FormAssignment[]
  sessionReviews          SessionReview[]          @relation("SessionReviewClient")
  therapistChangeRequests TherapistChangeRequest[] @relation("ChangeRequestClient")
  moodEntries             MoodEntry[]              @relation("ClientMoodEntry")
  symptomTrackers         ClientSymptomTracker[]   @relation("ClientSymptomTracker")
  dailyPrompts            DailyPrompt[]            @relation("ClientDailyPrompt")
  promptResponses         PromptResponse[]         @relation("ClientPromptResponse")
  engagementStreak        EngagementStreak?        @relation("ClientStreak")
  milestones              Milestone[]              @relation("ClientMilestone")
  preSessionPreps         PreSessionPrep[]         @relation("ClientPreSessionPrep")
  resourceAssignments     ResourceAssignment[]     @relation("ClientResourceAssignment")
  crisisToolkit           CrisisToolkit?           @relation("ClientCrisisToolkit")
  crisisToolkitUsage      CrisisToolkitUsage[]     @relation("ClientCrisisUsage")
  audioMessages           AudioMessage[]           @relation("ClientAudioMessage")
  audioPlayLogs           AudioPlayLog[]           @relation("ClientAudioPlayLog")
  homeworkAssignments     HomeworkAssignment[]     @relation("ClientHomework")
  therapeuticGoals        TherapeuticGoal[]        @relation("ClientGoal")
  winEntries              WinEntry[]               @relation("ClientWinEntry")
  copingSkillLogs         CopingSkillLog[]         @relation("ClientCopingSkillLog")
  scheduledCheckIns       ScheduledCheckIn[]       @relation("ClientScheduledCheckIn")
  reminderNudges          ReminderNudge[]          @relation("ClientReminderNudge")
  microContentDeliveries  MicroContentDelivery[]   @relation("ClientMicroContent")
  journalEntries          JournalEntry[]           @relation("ClientJournalEntry")
  sessionSummaries        SessionSummary[]         @relation("ClientSessionSummary")

  @@map("clients")
}

model EmergencyContact {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  name                String
  relationship        String
  phone               String
  alternatePhone      String?
  email               String?
  address             String?
  isPrimary           Boolean @default(false)
  okayToDiscussHealth Boolean @default(false)
  okayToLeaveMessage  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emergency_contacts")
}

model LegalGuardian {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  firstName    String
  lastName     String
  relationship String
  phoneNumber  String
  email        String?
  address      String?
  isPrimary    Boolean @default(false)
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("legal_guardians")
}

// ============================================================================
// PHASE 2: INSURANCE INFORMATION
// ============================================================================

model InsuranceInformation {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  rank               String // Primary, Secondary, Tertiary
  insuranceCompany   String
  insuranceCompanyId String?
  planName           String
  planType           String
  memberId           String
  groupNumber        String?

  effectiveDate   DateTime
  terminationDate DateTime?

  // Subscriber Info
  subscriberIsClient       Boolean   @default(true)
  subscriberFirstName      String?
  subscriberLastName       String?
  subscriberDOB            DateTime?
  subscriberSSN            String?
  relationshipToSubscriber String?
  subscriberEmployer       String?

  // Contact
  customerServicePhone  String?
  precertificationPhone String?
  providerPhone         String?

  // Coverage
  requiresReferral     Boolean  @default(false)
  requiresPriorAuth    Boolean  @default(false)
  mentalHealthCoverage Boolean  @default(true)
  copay                Decimal? @db.Decimal(10, 2)
  coinsurance          Int? // percentage
  deductible           Decimal? @db.Decimal(10, 2)
  deductibleMet        Decimal? @db.Decimal(10, 2)
  outOfPocketMax       Decimal? @db.Decimal(10, 2)
  outOfPocketMet       Decimal? @db.Decimal(10, 2)

  // Verification
  lastVerificationDate DateTime?
  lastVerifiedBy       String?
  verificationNotes    String?
  remainingSessions    Int?

  // Card Images
  frontCardImage String? // S3 URL
  backCardImage  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("insurance_information")
}

// ============================================================================
// PHASE 3: SCHEDULING & APPOINTMENTS
// ============================================================================

enum AppointmentStatus {
  REQUESTED
  SCHEDULED
  CONFIRMED
  CHECKED_IN
  IN_SESSION
  COMPLETED
  NO_SHOW
  CANCELLED
  RESCHEDULED
}

model Appointment {
  id          String @id @default(uuid())
  clientId    String
  client      Client @relation(fields: [clientId], references: [id])
  clinicianId String
  clinician   User   @relation("AppointmentClinician", fields: [clinicianId], references: [id])

  // Date/Time
  appointmentDate DateTime
  startTime       String
  endTime         String
  duration        Int // minutes
  timezone        String   @default("America/New_York")

  // Details
  appointmentType  String
  serviceLocation  String
  officeLocationId String?
  room             String?

  // Status
  status            AppointmentStatus @default(SCHEDULED)
  statusUpdatedDate DateTime          @default(now())
  statusUpdatedBy   String

  // Cancellation
  cancellationDate       DateTime?
  cancellationReason     String?
  cancellationNotes      String?
  cancelledBy            String?
  cancellationFeeApplied Boolean   @default(false)

  // No Show
  noShowDate       DateTime?
  noShowFeeApplied Boolean   @default(false)
  noShowNotes      String?

  // Check-in/out
  checkedInTime  String?
  checkedInBy    String?
  checkedOutTime String?
  checkedOutBy   String?
  actualDuration Int?

  // Billing
  cptCode       String?
  icdCodes      String[]
  chargeAmount  Decimal? @db.Decimal(10, 2)
  billingStatus String   @default("Not Billed")

  // Reminders
  emailReminderSent Boolean   @default(false)
  emailReminderDate DateTime?
  smsReminderSent   Boolean   @default(false)
  smsReminderDate   DateTime?

  // Recurring
  isRecurring          Boolean   @default(false)
  recurrenceFrequency  String?
  recurrenceInterval   Int?
  recurrenceDaysOfWeek String[]
  recurrenceEndDate    DateTime?
  parentRecurrenceId   String?

  // Notes
  appointmentNotes String?
  clientNotes      String?

  // Telehealth
  telehealthLink     String?
  telehealthPlatform String?

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  // Relations
  clinicalNotes     ClinicalNote[]
  telehealthSession TelehealthSession?

  // Client Portal Relations (Phase 9)
  sessionReview  SessionReview?
  preSessionPrep PreSessionPrep?
  sessionSummary SessionSummary?

  @@map("appointments")
}

// Telehealth Session Management
enum TelehealthSessionStatus {
  SCHEDULED
  WAITING_ROOM
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

model TelehealthSession {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  // Amazon Chime SDK Meeting Info
  chimeMeetingId         String  @unique
  chimeExternalMeetingId String?
  chimeMeetingRegion     String?

  // Session URLs
  clinicianJoinUrl String
  clientJoinUrl    String

  // Meeting Credentials (stored as JSON for flexibility)
  meetingDataJson Json // Contains meeting data from Chime

  // Session Status
  status            TelehealthSessionStatus @default(SCHEDULED)
  statusUpdatedDate DateTime                @default(now())

  // Waiting Room
  clientInWaitingRoom  Boolean   @default(false)
  waitingRoomEnteredAt DateTime?
  sessionStartedAt     DateTime?
  sessionEndedAt       DateTime?

  // Participants
  clinicianAttendeeId String?
  clientAttendeeId    String?
  attendeeDataJson    Json? // Additional attendee information

  // Recording
  recordingEnabled   Boolean   @default(false)
  recordingConsent   Boolean   @default(false)
  recordingStartedAt DateTime?
  recordingStoppedAt DateTime?
  recordingS3Key     String? // S3 location of recording
  recordingUrl       String? // Presigned URL for playback

  // Session Metadata
  actualDuration  Int? // minutes
  endReason       String? // Normal, Technical Issues, Emergency, etc.
  technicalIssues String? // Log of any technical problems

  // Compliance & Security
  hipaaAuditLog Json? // Audit trail for HIPAA compliance

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  @@map("telehealth_sessions")
}

// Telehealth Consent Management (Georgia Compliance)
model TelehealthConsent {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  // Consent Details
  consentType    String // 'Georgia_Telehealth', 'HIPAA_Telehealth', 'Recording'
  consentVersion String    @default("1.0")
  consentText    String // Full text of consent
  consentGiven   Boolean   @default(false)
  consentDate    DateTime?
  consentMethod  String? // 'Electronic', 'Paper', 'Verbal'

  // Georgia-Specific Requirements
  patientRightsAcknowledged        Boolean @default(false)
  emergencyProtocolsUnderstood     Boolean @default(false)
  privacyRisksAcknowledged         Boolean @default(false)
  technologyRequirementsUnderstood Boolean @default(false)

  // Consent Withdrawal
  consentWithdrawn Boolean   @default(false)
  withdrawalDate   DateTime?
  withdrawalReason String?

  // Renewal (Annual requirement in Georgia)
  expirationDate  DateTime
  renewalRequired Boolean   @default(true)
  renewalDate     DateTime?

  // Signature
  clientSignature  String? // Electronic signature
  clientIPAddress  String?
  clientUserAgent  String?
  witnessName      String?
  witnessSignature String?

  // Audit Trail
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  @@index([clientId, consentType, isActive])
  @@map("telehealth_consents")
}

// Clinician Schedule Management
model ClinicianSchedule {
  id          String @id @default(uuid())
  clinicianId String

  // Weekly schedule stored as JSON
  weeklyScheduleJson Json // {monday: DaySchedule, tuesday: DaySchedule, etc.}

  // Settings
  acceptNewClients              Boolean @default(true)
  maxAppointmentsPerDay         Int?
  maxAppointmentsPerWeek        Int?
  bufferTimeBetweenAppointments Int? // minutes

  // Available locations
  availableLocations String[]

  // Effective dates
  effectiveStartDate DateTime
  effectiveEndDate   DateTime?

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  @@map("clinician_schedules")
}

// Schedule Exceptions (Time Off, Modified Hours, etc.)
model ScheduleException {
  id          String @id @default(uuid())
  clinicianId String

  exceptionType String // 'Time Off', 'Holiday', 'Conference', 'Training', 'Modified Hours', 'Emergency', 'Other'

  startDate DateTime
  endDate   DateTime
  startTime String?
  endTime   String?
  allDay    Boolean  @default(true)

  reason String
  notes  String?

  status       String    @default("Requested") // 'Requested', 'Approved', 'Denied'
  approvedBy   String?
  approvalDate DateTime?
  denialReason String?

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  @@map("schedule_exceptions")
}

// Waitlist Management
model WaitlistEntry {
  id       String @id @default(uuid())
  clientId String

  requestedClinicianId  String
  alternateClinicianIds String[]

  requestedAppointmentType String
  preferredDays            String[]
  preferredTimes           String // 'Morning', 'Afternoon', 'Evening', 'Anytime'

  priority String @default("Normal") // 'Urgent', 'High', 'Normal', 'Low'

  addedDate DateTime @default(now())
  addedBy   String

  notified           Boolean   @default(false)
  notifiedDate       DateTime?
  notificationMethod String?

  status String @default("Active") // 'Active', 'Scheduled', 'Cancelled', 'Expired'

  scheduledAppointmentId String?
  scheduledDate          DateTime?

  notes String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waitlist_entries")
}

// Appointment Reminder Settings (per clinician)
model ReminderSettings {
  id          String @id @default(uuid())
  clinicianId String @unique

  enabled Boolean @default(true)

  // Email reminders
  emailRemindersEnabled Boolean @default(true)
  emailReminderTimings  Int[] // hours before [24, 1]
  emailTemplate         String?

  // SMS reminders
  smsRemindersEnabled Boolean @default(false)
  smsReminderTimings  Int[] // hours before [24, 1]
  smsTemplate         String?

  requireConfirmation   Boolean @default(false)
  includeRescheduleLink Boolean @default(true)
  includeCancelLink     Boolean @default(true)
  includeTelehealthLink Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reminder_settings")
}

// Service Codes (CPT Codes)
model ServiceCode {
  id String @id @default(uuid())

  code        String  @unique
  description String
  serviceType String // 'Therapy Intake', 'Therapy Session', 'Group Therapy', etc.
  category    String? // 'Therapy', 'Assessment', 'Consultation', etc.

  defaultDuration Int? // minutes
  defaultRate     Decimal? @db.Decimal(10, 2)

  isActive              Boolean @default(true)
  requiresAuthorization Boolean @default(false)

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  lastModifiedBy String?

  @@map("service_codes")
}

// ============================================================================
// PHASE 4: CLINICAL DOCUMENTATION
// ============================================================================

enum NoteStatus {
  DRAFT
  SIGNED
  LOCKED
  PENDING_COSIGN
  COSIGNED
  RETURNED_FOR_REVISION
}

model ClinicalNote {
  id            String      @id @default(uuid())
  clientId      String
  client        Client      @relation(fields: [clientId], references: [id])
  clinicianId   String
  clinician     User        @relation("NoteCreator", fields: [clinicianId], references: [id])
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  noteType         String // SOAP, Intake, Treatment Plan, etc.
  sessionDate      DateTime
  sessionStartTime String?
  sessionEndTime   String?
  sessionDuration  Int? // minutes

  // SOAP Note Fields
  subjective String?
  objective  String?
  assessment String?
  plan       String?

  // Risk Assessment
  suicidalIdeation      Boolean @default(false)
  suicidalPlan          Boolean @default(false)
  homicidalIdeation     Boolean @default(false)
  selfHarm              Boolean @default(false)
  riskLevel             String?
  riskAssessmentDetails String?
  interventionsTaken    String?

  // Diagnosis
  diagnosisCodes String[] // ICD-10 codes

  // Treatment
  interventionsUsed   String[]
  progressTowardGoals String?

  // Next Session
  nextSessionPlan String?
  nextSessionDate DateTime?

  // Status & Signatures
  status     NoteStatus @default(DRAFT)
  signedDate DateTime?
  signedBy   String?
  lockedDate DateTime?
  lockReason String?

  // Supervision/Co-signing
  requiresCosign     Boolean   @default(false)
  cosignedDate       DateTime?
  cosignedBy         String?
  cosigner           User?     @relation("NoteCosigner", fields: [cosignedBy], references: [id])
  supervisorComments String?

  // Revision Workflow (Phase 1.2)
  revisionHistory                Json[]   @default([]) // Array of {date, returnedBy, comments, requiredChanges, resolvedDate, resubmittedDate}
  revisionCount                  Int      @default(0)
  currentRevisionComments        String? // Current active revision comments
  currentRevisionRequiredChanges String[] @default([]) // Current active required changes list

  // Compliance
  dueDate         DateTime
  completedOnTime Boolean  @default(false)
  daysToComplete  Int?

  // Sunday Lockout & Unlock Requests
  isLocked           Boolean   @default(false)
  unlockRequested    Boolean   @default(false)
  unlockRequestDate  DateTime?
  unlockReason       String?
  unlockApprovedBy   String?
  unlockApprovalDate DateTime?
  unlockUntil        DateTime?

  // Billing
  cptCode     String?
  billingCode String?
  billable    Boolean @default(true)

  // AI Generated
  aiGenerated     Boolean @default(false)
  aiModel         String?
  aiPrompt        String?
  inputTranscript String?

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastModifiedBy String

  // Clinical Notes Business Rules Relations
  diagnosesCreated        Diagnosis[]             @relation("DiagnosisOriginNote")
  diagnosesLastUpdated    Diagnosis[]             @relation("DiagnosisLastUpdatedNote")
  diagnosisHistoryEntries DiagnosisHistory[]
  clinicalNoteDiagnoses   ClinicalNoteDiagnosis[]

  // Phase 1.4: Electronic Signatures
  signatureEvents SignatureEvent[] @relation("NoteSignatureEvents")

  // Phase 1.5: Amendment History
  amendments   NoteAmendment[] @relation("NoteAmendments")
  versions     NoteVersion[]   @relation("NoteVersions")
  billingHolds BillingHold[]

  // Unique constraint: One note per appointment per note type
  @@unique([appointmentId, noteType])
  @@map("clinical_notes")
}

// ============================================================================
// PHASE 1.3: REQUIRED FIELD VALIDATION ENGINE
// ============================================================================

model NoteValidationRule {
  id String @id @default(uuid())

  noteType          String // Which note type this rule applies to
  fieldName         String // Name of the field being validated
  isRequired        Boolean @default(false) // Whether field is required
  minLength         Int? // Minimum length for text fields
  maxLength         Int? // Maximum length for text fields
  validationPattern String? // Regex pattern for validation
  errorMessage      String? // Custom error message

  // Conditional requirements
  conditionalOn    String? // Field name that this depends on
  conditionalValue String? // Value that conditionalOn must have

  // Metadata
  displayLabel    String? // User-friendly label for UI
  helpText        String? // Help text for users
  validationOrder Int     @default(0) // Order in which to validate

  // Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  lastModifiedBy String?

  @@unique([noteType, fieldName])
  @@map("note_validation_rules")
}

model TreatmentPlan {
  id          String @id @default(uuid())
  clientId    String
  client      Client @relation(fields: [clientId], references: [id])
  clinicianId String

  planDate       DateTime  @default(now())
  reviewDate     DateTime?
  nextReviewDate DateTime

  // Presenting Problems
  presentingProblems String[]

  // Goals (stored as JSON)
  goalsJson Json // Array of goal objects

  // Interventions
  interventions     String[]
  frequency         String
  estimatedDuration String

  // Discharge Criteria
  dischargeCriteria String?

  // Status
  status String @default("Active")

  // Signatures
  clinicianSignature String?
  clinicianSignDate  DateTime?
  clientSignature    String?
  clientSignDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("treatment_plans")
}

model Diagnosis {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  icdCode              String
  diagnosisDescription String
  diagnosisType        String    @default("Primary")
  onsetDate            DateTime?
  resolvedDate         DateTime?
  status               String    @default("Active")
  notes                String?

  diagnosedBy   String
  diagnosisDate DateTime @default(now())

  // Clinical Notes Business Rules - Track diagnosis origin and changes
  specifiers            String?
  severity              String? // e.g., 'Mild', 'Moderate', 'Severe'
  diagnosisNoteId       String?
  diagnosisNote         ClinicalNote? @relation("DiagnosisOriginNote", fields: [diagnosisNoteId], references: [id], onDelete: SetNull)
  createdInNoteType     String? // Note type where diagnosis was created
  lastUpdatedInNoteType String? // Note type where diagnosis was last updated
  lastUpdatedNoteId     String?
  lastUpdatedNote       ClinicalNote? @relation("DiagnosisLastUpdatedNote", fields: [lastUpdatedNoteId], references: [id], onDelete: SetNull)

  // Relations
  history               DiagnosisHistory[]
  clinicalNoteDiagnoses ClinicalNoteDiagnosis[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("diagnoses")
}

model Medication {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  medicationName String
  dosage         String
  frequency      String
  route          String
  prescribedBy   String
  prescribedDate DateTime
  startDate      DateTime
  endDate        DateTime?

  status             String    @default("Active")
  discontinuedDate   DateTime?
  discontinuedReason String?

  instructions String?
  sideEffects  String?
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("medications")
}

// Diagnosis History - Audit trail for diagnosis changes (Clinical Notes Business Rule #3)
model DiagnosisHistory {
  id                String        @id @default(uuid())
  diagnosisId       String
  diagnosis         Diagnosis     @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
  changedBy         String
  changedByUser     User          @relation("DiagnosisHistoryUser", fields: [changedBy], references: [id], onDelete: Restrict)
  changedInNoteId   String?
  changedInNote     ClinicalNote? @relation(fields: [changedInNoteId], references: [id], onDelete: SetNull)
  changedInNoteType String? // Note type where change occurred
  changeType        String // 'CREATED', 'MODIFIED', 'STATUS_CHANGE', 'DELETED'
  oldValues         Json? // Previous values as JSON
  newValues         Json? // New values as JSON
  changeReason      String?
  changedAt         DateTime      @default(now())

  @@index([diagnosisId])
  @@index([changedAt])
  @@map("diagnosis_history")
}

// Clinical Note Diagnoses - Link diagnoses to notes for billing (Clinical Notes Business Rule #3)
model ClinicalNoteDiagnosis {
  id           String       @id @default(uuid())
  noteId       String
  note         ClinicalNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  diagnosisId  String
  diagnosis    Diagnosis    @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
  pointerOrder Int          @default(1) // Billing pointer order (1, 2, 3, 4)
  createdAt    DateTime     @default(now())

  @@unique([noteId, diagnosisId])
  @@index([noteId])
  @@index([diagnosisId])
  @@map("clinical_note_diagnoses")
}

// ============================================================================
// PHASE 5: SUPERVISION
// ============================================================================

model SupervisionSession {
  id           String @id @default(uuid())
  supervisorId String
  supervisor   User   @relation("SupervisionSessionSupervisor", fields: [supervisorId], references: [id])
  superviseeId String
  supervisee   User   @relation("SupervisionSessionSupervisee", fields: [superviseeId], references: [id])

  sessionDate      DateTime
  sessionStartTime String
  sessionEndTime   String
  sessionDuration  Int // minutes

  sessionType   String // Individual, Group, Triadic
  sessionFormat String // In-Person, Virtual, Phone

  // Content
  casesDiscussedJson Json // Array of cases
  topicsCovered      String[]
  skillsDeveloped    String[]

  feedbackProvided    String
  areasOfStrength     String[]
  areasForImprovement String[]

  actionItemsJson Json // Array of action items

  nextSessionScheduled Boolean   @default(false)
  nextSessionDate      DateTime?

  // Hours Credit
  hoursEarned Float
  hourType    String // Direct, Indirect, Group

  // Signatures
  supervisorSignature  String
  supervisorSignDate   DateTime
  superviseeSignature  String
  superviseeSignDate   DateTime
  superviseeReflection String?

  // Georgia Compliance (Phase 6 - Productivity Module)
  notesSigned   Boolean   @default(false)
  notesSignedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("supervision_sessions")
}

model SupervisionHoursLog {
  id           String @id @default(uuid())
  superviseeId String
  supervisee   User   @relation(fields: [superviseeId], references: [id])
  supervisorId String

  hourDate    DateTime
  hourType    String
  hoursEarned Float

  sessionDescription String
  topicsCovered      String[]

  verifiedBySupervisor       Boolean   @default(false)
  supervisorVerificationDate DateTime?
  supervisorSignature        String?

  appliesTo String // License requirement
  status    String @default("Pending")

  createdAt DateTime @default(now())
  createdBy String

  @@map("supervision_hours_log")
}

// ============================================================================
// PHASE 7: CLIENT PORTAL
// ============================================================================

enum PortalAccountStatus {
  ACTIVE
  INACTIVE
  LOCKED
  PENDING_VERIFICATION
}

model PortalAccount {
  id       String @id @default(uuid())
  clientId String @unique
  client   Client @relation(fields: [clientId], references: [id])

  email      String  @unique
  password   String // hashed
  mfaEnabled Boolean @default(false)
  mfaMethod  String?

  accountStatus     PortalAccountStatus @default(PENDING_VERIFICATION)
  emailVerified     Boolean             @default(false)
  verificationToken String?

  // Password Reset
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?

  lastLoginDate       DateTime?
  failedLoginAttempts Int       @default(0)
  accountLockedUntil  DateTime?

  // Preferences
  emailNotifications   Boolean @default(true)
  smsNotifications     Boolean @default(false)
  appointmentReminders Boolean @default(true)
  billingReminders     Boolean @default(true)
  messageNotifications Boolean @default(true)

  portalAccessGranted Boolean   @default(false)
  grantedBy           String?
  grantedDate         DateTime?

  isGuardianAccount Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("portal_accounts")
}

// Client Portal - Intake Forms
model IntakeForm {
  id String @id @default(uuid())

  formName        String
  formDescription String?
  formType        String // 'Initial_Intake', 'Annual_Update', 'Symptom_Checklist', 'Custom'

  // Form Structure (stored as JSON)
  formFieldsJson Json // Array of field definitions

  isActive             Boolean @default(true)
  isRequired           Boolean @default(false)
  assignedToNewClients Boolean @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String
  lastModifiedBy String

  submissions IntakeFormSubmission[]
  assignments FormAssignment[]

  @@map("intake_forms")
}

model IntakeFormSubmission {
  id       String     @id @default(uuid())
  formId   String
  form     IntakeForm @relation(fields: [formId], references: [id])
  clientId String

  // Form Responses (stored as JSON)
  responsesJson Json // Object with field_id: value pairs

  status        String    @default("Draft") // 'Draft', 'Submitted', 'Reviewed'
  submittedDate DateTime?
  reviewedDate  DateTime?
  reviewedBy    String?
  reviewerNotes String?

  // E-Signature fields
  signatureData      String? // Base64 encoded signature image (canvas drawing)
  signedByName       String? // Full name entered by client
  signedDate         DateTime?
  signatureIpAddress String? // IP address at time of signature
  consentAgreed      Boolean   @default(false) // Client agreed to e-signature consent

  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment FormAssignment?

  @@map("intake_form_submissions")
}

// Client Portal - Assessment Assignments
model AssessmentAssignment {
  id String @id @default(uuid())

  clientId String

  assessmentName String
  assessmentType String // 'PHQ9', 'GAD7', 'PCL5', 'BAI', 'BDI', 'Custom'
  description    String?

  assignedBy String
  assignedAt DateTime  @default(now())
  dueDate    DateTime?

  status      String    @default("PENDING") // 'PENDING', 'IN_PROGRESS', 'COMPLETED'
  completedAt DateTime?

  // Results
  score          Int?
  interpretation String?
  responses      Json? // Question responses

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, status])
  @@map("assessment_assignments")
}

// Client Portal - Secure Messaging
model PortalMessage {
  id String @id @default(uuid())

  clientId String

  subject String
  message String

  sentByClient Boolean @default(true)
  sentBy       String // User ID or Client ID

  recipientId String? // Clinician/staff user ID

  isRead   Boolean   @default(false)
  readDate DateTime?

  // Thread tracking
  threadId        String? // Group related messages
  parentMessageId String?

  // Attachments
  attachmentsJson Json? // Array of attachment objects with S3 URLs

  priority String @default("Normal") // 'Low', 'Normal', 'High', 'Urgent'

  // Flags
  requiresResponse Boolean   @default(false)
  respondedDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, createdAt])
  @@index([threadId])
  @@map("portal_messages")
}

// Client Portal - Prescription Refill Requests
model PrescriptionRefillRequest {
  id       String @id @default(uuid())
  clientId String

  medicationName String
  currentDosage  String
  prescriberId   String // Clinician user ID
  pharmacyName   String?
  pharmacyPhone  String?

  requestReason String?
  urgency       String  @default("Routine") // 'Routine', 'Urgent'

  status          String   @default("Pending") // 'Pending', 'Approved', 'Denied', 'Completed'
  statusDate      DateTime @default(now())
  statusUpdatedBy String?

  reviewedBy   String?
  reviewedDate DateTime?
  reviewNotes  String?

  denialReason String?

  approvedDate      DateTime?
  approvedBy        String?
  approvedDosage    String?
  approvedQuantity  Int?
  refillsAuthorized Int?

  prescriptionSentDate DateTime?
  prescriptionNumber   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId, status])
  @@map("prescription_refill_requests")
}

// ============================================================================
// PHASE 8: BILLING & FINANCIAL
// ============================================================================

model ChargeEntry {
  id            String  @id @default(uuid())
  clientId      String
  client        Client  @relation(fields: [clientId], references: [id])
  appointmentId String?

  serviceDate           DateTime
  providerId            String
  supervisingProviderId String?

  cptCode        String
  cptDescription String
  modifiers      String[]
  units          Int      @default(1)

  diagnosisCodesJson Json // Array of diagnosis objects

  placeOfService String
  locationId     String?

  chargeAmount         Decimal  @db.Decimal(10, 2)
  allowedAmount        Decimal? @db.Decimal(10, 2)
  adjustmentAmount     Decimal? @db.Decimal(10, 2)
  paymentAmount        Decimal? @db.Decimal(10, 2)
  clientResponsibility Decimal? @db.Decimal(10, 2)

  primaryInsuranceId   String?
  secondaryInsuranceId String?

  chargeStatus String    @default("Unbilled")
  claimId      String?
  claimStatus  String?
  billedDate   DateTime?

  denialCode   String?
  denialReason String?
  appealFiled  Boolean   @default(false)
  appealDate   DateTime?

  writeOffAmount Decimal?  @db.Decimal(10, 2)
  writeOffReason String?
  writeOffDate   DateTime?

  createdAt DateTime @default(now())
  createdBy String

  @@map("charge_entries")
}

model PaymentRecord {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  paymentDate   DateTime
  paymentAmount Decimal  @db.Decimal(10, 2)

  paymentSource String // Insurance, Client, Guarantor
  paymentMethod String // Check, Card, Cash, ACH

  checkNumber   String?
  cardLast4     String?
  transactionId String?

  appliedPaymentsJson Json // Array of applied payment objects

  eobDate       DateTime?
  eobAttachment String? // S3 URL
  claimNumber   String?

  adjustmentsJson Json? // Array of adjustment objects

  overpaymentAmount Decimal?  @db.Decimal(10, 2)
  refundIssued      Boolean   @default(false)
  refundDate        DateTime?
  refundAmount      Decimal?  @db.Decimal(10, 2)

  unappliedAmount Decimal @default(0) @db.Decimal(10, 2)

  paymentStatus String @default("Posted")

  postedBy   String
  postedDate DateTime @default(now())
  notes      String?

  createdAt DateTime @default(now())

  @@map("payment_records")
}

model ClientStatement {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  statementDate   DateTime
  periodStartDate DateTime
  periodEndDate   DateTime

  previousBalance Decimal @db.Decimal(10, 2)
  currentCharges  Decimal @db.Decimal(10, 2)
  payments        Decimal @db.Decimal(10, 2)
  adjustments     Decimal @db.Decimal(10, 2)
  currentBalance  Decimal @db.Decimal(10, 2)

  aging0to30   Decimal @db.Decimal(10, 2)
  aging31to60  Decimal @db.Decimal(10, 2)
  aging61to90  Decimal @db.Decimal(10, 2)
  aging91to120 Decimal @db.Decimal(10, 2)
  aging120Plus Decimal @db.Decimal(10, 2)

  statementMessage String?
  dueDate          DateTime?

  statementStatus String    @default("Generated")
  sentDate        DateTime?
  sentMethod      String? // Mail, Email, Portal

  viewedInPortal Boolean   @default(false)
  viewedDate     DateTime?

  inCollections    Boolean   @default(false)
  collectionDate   DateTime?
  collectionAgency String?

  createdAt DateTime @default(now())

  @@map("client_statements")
}

// ============================================================================
// PHASE 10: DOCUMENT MANAGEMENT
// ============================================================================

model ClientDocument {
  id       String @id @default(uuid())
  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  documentName        String
  documentType        String
  documentCategory    String?
  documentDescription String?

  fileUrl  String
  fileName String
  fileSize Int
  fileType String

  uploadedBy     String
  uploadedDate   DateTime @default(now())
  uploadedMethod String

  documentSource   String
  externalProvider String?
  documentDate     DateTime

  requiresSignature Boolean @default(false)
  signaturesJson    Json? // Array of signature objects

  sharedWithClient Boolean   @default(false)
  sharedViaPortal  Boolean   @default(false)
  sharedDate       DateTime?
  clientViewedDate DateTime?

  isEmbeddedForm    Boolean @default(false)
  formResponsesJson Json?

  versionNumber     Int     @default(1)
  previousVersionId String?
  latestVersion     Boolean @default(true)

  ocrProcessed  Boolean @default(false)
  extractedText String?

  tags   String[]
  status String   @default("Active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_documents")
}

// ============================================================================
// PHASE 9: ENHANCED CLIENT PORTAL - MENTAL HEALTH COMPANION
// ============================================================================

// Category 1: Core Transactional Features

model InsuranceCard {
  id              String   @id @default(uuid())
  clientId        String
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  insuranceType   String // 'PRIMARY', 'SECONDARY'
  frontImageS3Key String
  backImageS3Key  String
  insuranceName   String?
  policyNumber    String?
  groupNumber     String?
  uploadedAt      DateTime @default(now())
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())

  @@index([clientId, isActive])
  @@map("insurance_cards")
}

model PaymentMethod {
  id                    String   @id @default(uuid())
  clientId              String
  client                Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stripePaymentMethodId String   @unique
  cardBrand             String // 'visa', 'mastercard', etc.
  cardLast4             String
  cardExpMonth          Int
  cardExpYear           Int
  isDefault             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([clientId, isDefault])
  @@map("payment_methods")
}

model FormAssignment {
  id               String                @id @default(uuid())
  formId           String
  clientId         String
  client           Client                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  assignedBy       String // User ID of therapist/admin
  assignedAt       DateTime              @default(now())
  dueDate          DateTime?
  isRequired       Boolean               @default(false)
  assignmentNotes  String? // Internal notes for therapist
  clientMessage    String? // Message to send to client
  status           String                @default("PENDING") // 'PENDING', 'IN_PROGRESS', 'COMPLETED'
  completedAt      DateTime?
  submissionId     String?               @unique
  lastReminderSent DateTime?
  form             IntakeForm            @relation(fields: [formId], references: [id])
  submission       IntakeFormSubmission? @relation(fields: [submissionId], references: [id])

  @@index([clientId, status])
  @@map("form_assignments")
}

model DocumentSignature {
  id               String   @id @default(uuid())
  documentId       String
  signedBy         String // Client ID or User ID
  signatureImageS3 String // S3 key for signature image
  signedAt         DateTime @default(now())
  ipAddress        String
  userAgent        String
  deviceInfo       Json?
  signatureType    String // 'ELECTRONIC', 'DIGITAL'
  isValid          Boolean  @default(true)
  createdAt        DateTime @default(now())

  @@index([documentId, signedBy])
  @@map("document_signatures")
}

model SharedDocument {
  id            String    @id @default(uuid())
  clientId      String
  documentType  String // 'TREATMENT_PLAN', 'SESSION_SUMMARY', 'CONSENT_FORM', etc.
  documentName  String
  documentS3Key String
  sharedBy      String // User ID
  sharedAt      DateTime  @default(now())
  expiresAt     DateTime?
  viewCount     Int       @default(0)
  lastViewedAt  DateTime?
  isActive      Boolean   @default(true)

  @@index([clientId, isActive])
  @@map("shared_documents")
}

model SessionReview {
  id                    String      @id @default(uuid())
  appointmentId         String      @unique
  appointment           Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  clientId              String
  client                Client      @relation("SessionReviewClient", fields: [clientId], references: [id], onDelete: Cascade)
  clinicianId           String
  clinician             User        @relation("SessionReviewClinician", fields: [clinicianId], references: [id])
  rating                Int // 1-5 stars
  feedback              String?
  categories            Json? // { "effectiveness": 5, "alliance": 4, "environment": 5 }
  isSharedWithClinician Boolean     @default(false)
  isAnonymous           Boolean     @default(false)
  clinicianViewed       Boolean     @default(false)
  clinicianViewedAt     DateTime?
  clinicianResponse     String?
  clinicianRespondedAt  DateTime?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([clinicianId, isSharedWithClinician])
  @@index([clientId, createdAt])
  @@map("session_reviews")
}

model TherapistChangeRequest {
  id                  String    @id @default(uuid())
  clientId            String
  client              Client    @relation("ChangeRequestClient", fields: [clientId], references: [id], onDelete: Cascade)
  currentClinicianId  String
  currentClinician    User      @relation("ChangeRequestCurrentClinician", fields: [currentClinicianId], references: [id])
  requestReason       String // 'SCHEDULE_CONFLICT', 'THERAPEUTIC_FIT', 'SPECIALTY_NEEDS', 'PERSONAL_PREFERENCE', 'OTHER'
  reasonDetails       String
  isSensitive         Boolean   @default(false)
  status              String    @default("PENDING") // 'PENDING', 'UNDER_REVIEW', 'APPROVED', 'COMPLETED', 'DENIED'
  reviewedBy          String? // Admin user ID
  reviewedAt          DateTime?
  reviewNotes         String?
  newClinicianId      String?
  newClinician        User?     @relation("ChangeRequestNewClinician", fields: [newClinicianId], references: [id])
  assignedAt          DateTime?
  transferCompletedAt DateTime?
  denialReason        String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([clientId, status])
  @@index([status, reviewedAt])
  @@map("therapist_change_requests")
}

// Client Referral System
model ClientReferral {
  id                  String  @id @default(uuid())
  referredByClientId  String // Existing client making the referral
  referredPersonName  String
  referredPersonEmail String?
  referredPersonPhone String
  relationship        String? // 'Friend', 'Family', 'Colleague', 'Other'
  referralReason      String? // Why they think person needs services
  additionalNotes     String?

  status        String    @default("PENDING") // 'PENDING', 'CONTACTED', 'SCHEDULED_INTAKE', 'BECAME_CLIENT', 'DECLINED', 'NO_RESPONSE'
  contactedDate DateTime?
  contactedBy   String? // Staff user ID who made contact
  contactNotes  String?

  intakeScheduledDate  DateTime?
  appointmentScheduled Boolean   @default(false)

  convertedToClientId String? // If they become a client, link to Client.id
  convertedDate       DateTime?

  incentiveEarned      Boolean   @default(false)
  incentiveAmount      Decimal?  @db.Decimal(10, 2)
  incentiveAppliedDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([referredByClientId, status])
  @@index([status, createdAt])
  @@map("client_referrals")
}

// Category 2: Daily Engagement Features

model MoodEntry {
  id                  String   @id @default(uuid())
  clientId            String
  client              Client   @relation("ClientMoodEntry", fields: [clientId], references: [id], onDelete: Cascade)
  entryDate           DateTime
  timeOfDay           String // 'MORNING', 'AFTERNOON', 'EVENING'
  moodScore           Int // 1-10
  symptoms            String[] // ['ANXIETY', 'DEPRESSION', 'INSOMNIA', 'FATIGUE', etc.]
  customMetrics       Json? // { "irritability": 7, "motivation": 3 }
  notes               String?
  sharedWithClinician Boolean  @default(true)
  createdAt           DateTime @default(now())

  @@index([clientId, entryDate])
  @@map("mood_entries")
}

model SymptomDefinition {
  id          String   @id @default(uuid())
  symptomName String
  symptomType String // 'STANDARD', 'CUSTOM'
  createdBy   String? // User ID if custom
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("symptom_definitions")
}

model ClientSymptomTracker {
  id         String   @id @default(uuid())
  clientId   String
  client     Client   @relation("ClientSymptomTracker", fields: [clientId], references: [id], onDelete: Cascade)
  symptomId  String
  isEnabled  Boolean  @default(true)
  assignedBy String // User ID of therapist
  assignedAt DateTime @default(now())

  @@unique([clientId, symptomId])
  @@map("client_symptom_trackers")
}

model DailyPrompt {
  id         String           @id @default(uuid())
  clientId   String
  client     Client           @relation("ClientDailyPrompt", fields: [clientId], references: [id], onDelete: Cascade)
  createdBy  String // User ID of therapist
  creator    User             @relation("DailyPromptCreator", fields: [createdBy], references: [id])
  promptType String // 'GRATITUDE', 'COGNITIVE_REFRAME', 'BEHAVIORAL_ACTIVATION', etc.
  promptText String
  schedule   Json // { "frequency": "DAILY", "time": "09:00", "daysOfWeek": [1,2,3,4,5] }
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  responses  PromptResponse[]

  @@index([clientId, isActive, startDate])
  @@map("daily_prompts")
}

model PromptResponse {
  id           String      @id @default(uuid())
  promptId     String
  prompt       DailyPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  clientId     String
  client       Client      @relation("ClientPromptResponse", fields: [clientId], references: [id], onDelete: Cascade)
  responseText String
  imageS3Key   String?
  respondedAt  DateTime    @default(now())

  @@index([clientId, respondedAt])
  @@map("prompt_responses")
}

model EngagementStreak {
  id                 String    @id @default(uuid())
  clientId           String    @unique
  client             Client    @relation("ClientStreak", fields: [clientId], references: [id], onDelete: Cascade)
  currentStreak      Int       @default(0)
  longestStreak      Int       @default(0)
  lastCheckInDate    DateTime?
  totalCheckIns      Int       @default(0)
  milestonesAchieved Json      @default("[]") // [7, 14, 30, 60, 90]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("engagement_streaks")
}

model Milestone {
  id             String    @id @default(uuid())
  clientId       String
  client         Client    @relation("ClientMilestone", fields: [clientId], references: [id], onDelete: Cascade)
  milestoneType  String // 'STREAK', 'TOTAL_CHECKINS', 'HOMEWORK_COMPLETION', etc.
  milestoneValue Int
  achievedAt     DateTime  @default(now())
  badgeName      String
  isViewed       Boolean   @default(false)
  viewedAt       DateTime?

  @@index([clientId, achievedAt])
  @@map("milestones")
}

model PreSessionPrep {
  id                String      @id @default(uuid())
  appointmentId     String      @unique
  appointment       Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  clientId          String
  client            Client      @relation("ClientPreSessionPrep", fields: [clientId], references: [id], onDelete: Cascade)
  topicsToDiscuss   String?
  recentFeelings    String?
  homeworkStatus    String? // 'COMPLETED', 'PARTIALLY_COMPLETED', 'NOT_COMPLETED'
  urgentConcerns    String?
  isUrgent          Boolean     @default(false)
  submittedAt       DateTime    @default(now())
  viewedByClinician Boolean     @default(false)
  viewedAt          DateTime?

  @@index([clientId, submittedAt])
  @@map("pre_session_preps")
}

// Category 3: Between-Session Support

model Resource {
  id           String               @id @default(uuid())
  resourceType String // 'ARTICLE', 'VIDEO', 'PDF', 'WORKSHEET', 'AUDIO'
  title        String
  description  String?
  contentUrl   String?
  contentS3Key String?
  category     String // 'COPING_SKILLS', 'PSYCHOEDUCATION', 'EXERCISES', etc.
  tags         String[]
  createdBy    String // User ID
  creator      User                 @relation("ResourceCreator", fields: [createdBy], references: [id])
  isPublic     Boolean              @default(false)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  assignments  ResourceAssignment[]

  @@map("resources")
}

model ResourceAssignment {
  id             String    @id @default(uuid())
  resourceId     String
  resource       Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  clientId       String
  client         Client    @relation("ClientResourceAssignment", fields: [clientId], references: [id], onDelete: Cascade)
  assignedBy     String // User ID
  assigner       User      @relation("ResourceAssigner", fields: [assignedBy], references: [id])
  priority       String    @default("OPTIONAL") // 'REQUIRED', 'RECOMMENDED', 'OPTIONAL'
  therapistNotes String?
  assignedAt     DateTime  @default(now())
  viewedAt       DateTime?
  completedAt    DateTime?
  clientRating   Int? // 1-5
  clientFeedback String?

  @@index([clientId, assignedAt])
  @@map("resource_assignments")
}

model CrisisToolkit {
  id                 String               @id @default(uuid())
  clientId           String               @unique
  client             Client               @relation("ClientCrisisToolkit", fields: [clientId], references: [id], onDelete: Cascade)
  enabledTools       String[] // ['GROUNDING', 'BREATHING', 'COPING_STRATEGIES', etc.]
  safetyPlanS3Key    String?
  customInstructions String?
  emergencyContacts  Json // [{ "name": "Dr. Smith", "phone": "555-1234", "relationship": "Therapist" }]
  lastUpdatedBy      String // User ID
  manager            User                 @relation("CrisisToolkitManager", fields: [lastUpdatedBy], references: [id])
  lastUpdatedAt      DateTime             @default(now())
  createdAt          DateTime             @default(now())
  usageLogs          CrisisToolkitUsage[]

  @@map("crisis_toolkits")
}

model CrisisToolkitUsage {
  id              String        @id @default(uuid())
  clientId        String
  client          Client        @relation("ClientCrisisUsage", fields: [clientId], references: [id], onDelete: Cascade)
  toolkitId       String
  toolkit         CrisisToolkit @relation(fields: [toolkitId], references: [id], onDelete: Cascade)
  accessedAt      DateTime      @default(now())
  toolUsed        String? // 'GROUNDING', 'BREATHING', 'SAFETY_PLAN', etc.
  durationSeconds Int?

  @@index([clientId, accessedAt])
  @@map("crisis_toolkit_usage")
}

model AudioMessage {
  id              String         @id @default(uuid())
  clientId        String
  client          Client         @relation("ClientAudioMessage", fields: [clientId], references: [id], onDelete: Cascade)
  createdBy       String // User ID of therapist
  creator         User           @relation("AudioMessageCreator", fields: [createdBy], references: [id])
  title           String
  description     String?
  category        String // 'GROUNDING', 'AFFIRMATION', 'COPING_SKILL', 'PERSONALIZED'
  audioS3Key      String
  durationSeconds Int
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  playLogs        AudioPlayLog[]

  @@map("audio_messages")
}

model AudioPlayLog {
  id             String       @id @default(uuid())
  audioId        String
  audio          AudioMessage @relation(fields: [audioId], references: [id], onDelete: Cascade)
  clientId       String
  client         Client       @relation("ClientAudioPlayLog", fields: [clientId], references: [id], onDelete: Cascade)
  playedAt       DateTime     @default(now())
  durationPlayed Int // Seconds
  completedFully Boolean      @default(false)
  helpfulRating  Int? // 1-5

  @@index([clientId, playedAt])
  @@map("audio_play_logs")
}

model HomeworkAssignment {
  id                    String    @id @default(uuid())
  clientId              String
  client                Client    @relation("ClientHomework", fields: [clientId], references: [id], onDelete: Cascade)
  assignedBy            String // User ID
  assigner              User      @relation("HomeworkAssigner", fields: [assignedBy], references: [id])
  title                 String
  description           String
  homeworkType          String // 'BEHAVIORAL_EXPERIMENT', 'THOUGHT_RECORD', 'READING', 'SKILL_PRACTICE'
  instructions          String?
  attachmentS3Keys      String[] // Worksheet templates
  dueDate               DateTime
  status                String    @default("ASSIGNED") // 'ASSIGNED', 'IN_PROGRESS', 'COMPLETED', 'REVIEWED'
  assignedAt            DateTime  @default(now())
  startedAt             DateTime?
  completedAt           DateTime?
  reviewedAt            DateTime?
  completionNotes       String?
  completionAttachments String[] // Client uploads
  therapistFeedback     String?

  @@index([clientId, status, dueDate])
  @@map("homework_assignments")
}

// Category 4: Progress & Motivation

model TherapeuticGoal {
  id              String               @id @default(uuid())
  clientId        String
  client          Client               @relation("ClientGoal", fields: [clientId], references: [id], onDelete: Cascade)
  createdBy       String // User ID (can be client or therapist)
  creator         User                 @relation("GoalCreator", fields: [createdBy], references: [id])
  goalTitle       String
  goalDescription String?
  goalCategory    String // 'SYMPTOM_REDUCTION', 'SKILL_BUILDING', 'LIFE_GOAL', 'BEHAVIORAL_GOAL'
  targetDate      DateTime?
  status          String               @default("ACTIVE") // 'ACTIVE', 'ACHIEVED', 'MODIFIED', 'DISCONTINUED'
  progressPercent Int                  @default(0)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  achievedAt      DateTime?
  subGoals        SubGoal[]
  progressUpdates GoalProgressUpdate[]

  @@index([clientId, status])
  @@map("therapeutic_goals")
}

model SubGoal {
  id           String          @id @default(uuid())
  parentGoalId String
  parentGoal   TherapeuticGoal @relation(fields: [parentGoalId], references: [id], onDelete: Cascade)
  title        String
  isCompleted  Boolean         @default(false)
  completedAt  DateTime?
  createdAt    DateTime        @default(now())

  @@map("sub_goals")
}

model GoalProgressUpdate {
  id              String          @id @default(uuid())
  goalId          String
  goal            TherapeuticGoal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  updatedBy       String // User ID (client or therapist)
  updater         User            @relation("GoalUpdater", fields: [updatedBy], references: [id])
  progressPercent Int
  updateNotes     String?
  updatedAt       DateTime        @default(now())

  @@index([goalId, updatedAt])
  @@map("goal_progress_updates")
}

model WinEntry {
  id         String       @id @default(uuid())
  clientId   String
  client     Client       @relation("ClientWinEntry", fields: [clientId], references: [id], onDelete: Cascade)
  winText    String
  category   String? // 'PERSONAL', 'PROFESSIONAL', 'THERAPEUTIC', 'RELATIONSHIPS'
  tags       String[]
  imageS3Key String?
  createdAt  DateTime     @default(now())
  comments   WinComment[]

  @@index([clientId, createdAt])
  @@map("win_entries")
}

model WinComment {
  id          String   @id @default(uuid())
  winId       String
  win         WinEntry @relation(fields: [winId], references: [id], onDelete: Cascade)
  commentedBy String // User ID
  commenter   User     @relation("WinCommenter", fields: [commentedBy], references: [id])
  commentText String
  commentedAt DateTime @default(now())

  @@index([winId, commentedAt])
  @@map("win_comments")
}

model CopingSkillLog {
  id            String   @id @default(uuid())
  clientId      String
  client        Client   @relation("ClientCopingSkillLog", fields: [clientId], references: [id], onDelete: Cascade)
  skillName     String
  skillCategory String // 'BREATHING', 'GROUNDING', 'DISTRACTION', etc.
  feelingBefore Int // 1-10
  feelingAfter  Int // 1-10
  effectiveness Int // Calculated: difference
  reflection    String?
  usedAt        DateTime @default(now())

  @@index([clientId, usedAt])
  @@index([clientId, skillName])
  @@map("coping_skill_logs")
}

// Category 5: Smart Notifications

model ScheduledCheckIn {
  id             String    @id @default(uuid())
  clientId       String
  client         Client    @relation("ClientScheduledCheckIn", fields: [clientId], references: [id], onDelete: Cascade)
  createdBy      String // User ID
  creator        User      @relation("CheckInCreator", fields: [createdBy], references: [id])
  questionText   String
  scheduledFor   DateTime
  isRecurring    Boolean   @default(false)
  recurrenceRule Json?
  status         String    @default("SCHEDULED") // 'SCHEDULED', 'SENT', 'RESPONDED', 'SKIPPED'
  sentAt         DateTime?
  responseText   String?
  respondedAt    DateTime?
  createdAt      DateTime  @default(now())

  @@index([clientId, scheduledFor])
  @@map("scheduled_check_ins")
}

model ReminderNudge {
  id          String          @id @default(uuid())
  clientId    String
  client      Client          @relation("ClientReminderNudge", fields: [clientId], references: [id], onDelete: Cascade)
  nudgeType   String // 'MEDICATION', 'BREATHING', 'CHECK_IN', etc.
  nudgeText   String
  triggerRule Json // { "pattern": "HIGH_ANXIETY", "days": ["MONDAY"], "time": "09:00" }
  isActive    Boolean         @default(true)
  createdBy   String? // User ID or 'SYSTEM'
  createdAt   DateTime        @default(now())
  deliveries  NudgeDelivery[]

  @@map("reminder_nudges")
}

model NudgeDelivery {
  id          String        @id @default(uuid())
  nudgeId     String
  nudge       ReminderNudge @relation(fields: [nudgeId], references: [id], onDelete: Cascade)
  sentAt      DateTime      @default(now())
  wasActioned Boolean       @default(false)
  actionedAt  DateTime?

  @@index([nudgeId, sentAt])
  @@map("nudge_deliveries")
}

model MicroContent {
  id          String                 @id @default(uuid())
  contentText String
  contentType String // 'TIP', 'QUOTE', 'REMINDER', 'INSIGHT'
  categories  String[] // ['ANXIETY', 'DEPRESSION', 'DBT', 'CBT']
  createdBy   String? // User ID or 'SYSTEM'
  isApproved  Boolean                @default(false)
  approvedBy  String?
  createdAt   DateTime               @default(now())
  deliveries  MicroContentDelivery[]

  @@map("micro_content")
}

model MicroContentDelivery {
  id            String       @id @default(uuid())
  contentId     String
  content       MicroContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  clientId      String
  client        Client       @relation("ClientMicroContent", fields: [clientId], references: [id], onDelete: Cascade)
  deliveredAt   DateTime     @default(now())
  wasViewed     Boolean      @default(false)
  viewedAt      DateTime?
  helpfulRating Int? // 1-5

  @@index([clientId, deliveredAt])
  @@map("micro_content_deliveries")
}

// Category 6: Journaling with AI

model JournalEntry {
  id                    String            @id @default(uuid())
  clientId              String
  client                Client            @relation("ClientJournalEntry", fields: [clientId], references: [id], onDelete: Cascade)
  entryText             String
  entryDate             DateTime          @default(now())
  isSharedWithClinician Boolean           @default(false)
  aiPromptsEnabled      Boolean           @default(true)
  voiceToText           Boolean           @default(false)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  aiPrompts             AIJournalPrompt[]
  clinicianComments     JournalComment[]

  @@index([clientId, entryDate])
  @@map("journal_entries")
}

model AIJournalPrompt {
  id          String       @id @default(uuid())
  entryId     String
  entry       JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  promptText  String
  generatedAt DateTime     @default(now())
  wasAnswered Boolean      @default(false)
  answerText  String?
  answeredAt  DateTime?

  @@map("ai_journal_prompts")
}

model JournalComment {
  id          String       @id @default(uuid())
  entryId     String
  entry       JournalEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  commentedBy String // User ID
  commenter   User         @relation("JournalCommenter", fields: [commentedBy], references: [id])
  commentText String
  commentedAt DateTime     @default(now())

  @@map("journal_comments")
}

// Category 7: Two-Way Communication

model VoiceMemo {
  id              String   @id @default(uuid())
  messageId       String // Links to PortalMessage
  sentBy          String // User ID or Client ID
  audioS3Key      String
  durationSeconds Int
  transcription   String? // Optional AI transcription
  createdAt       DateTime @default(now())

  @@index([messageId])
  @@map("voice_memos")
}

model SessionSummary {
  id                 String      @id @default(uuid())
  appointmentId      String      @unique
  appointment        Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  clinicianId        String
  clinician          User        @relation("SessionSummaryCreator", fields: [clinicianId], references: [id])
  clientId           String
  client             Client      @relation("ClientSessionSummary", fields: [clientId], references: [id], onDelete: Cascade)
  summaryText        String
  keyPoints          String[]
  homeworkAssigned   String?
  goalsDiscussed     String[]
  isSharedWithClient Boolean     @default(false)
  sharedAt           DateTime?
  pdfS3Key           String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([clientId, sharedAt])
  @@map("session_summaries")
}

// ============================================================================
// SYSTEM TABLES
// ============================================================================

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?
  clientId   String?
  action     String
  entityType String
  entityId   String
  changes    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())

  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String

  @@map("system_config")
}

// ============================================================================
// PHASE 6: PRODUCTIVITY & ACCOUNTABILITY MODULE (ADDED OCT 2025)
// ============================================================================

model ProductivityMetric {
  id           String   @id @default(uuid())
  clinicianId  String
  metricType   String // 'KVR', 'NO_SHOW_RATE', 'DOCUMENTATION_RATE', etc.
  metricValue  Decimal  @db.Decimal(10, 2)
  periodStart  DateTime
  periodEnd    DateTime
  calculatedAt DateTime @default(now())
  metadata     Json? // Additional context (e.g., numerator, denominator)
  createdAt    DateTime @default(now())

  clinician User @relation("ProductivityMetrics", fields: [clinicianId], references: [id])

  @@index([clinicianId, metricType, periodStart])
  @@map("productivity_metrics")
}

model ComplianceAlert {
  id             String    @id @default(uuid())
  alertType      String // 'UNSIGNED_NOTE', 'TREATMENT_PLAN_OVERDUE', 'SUPERVISION_HOURS', etc.
  severity       String // 'INFO', 'WARNING', 'CRITICAL'
  targetUserId   String // Clinician or staff member
  supervisorId   String? // Escalated to supervisor
  adminId        String? // Escalated to admin
  message        String
  actionRequired String
  status         String    @default("OPEN") // 'OPEN', 'ACKNOWLEDGED', 'RESOLVED'
  acknowledgedAt DateTime?
  resolvedAt     DateTime?
  metadata       Json? // Additional context
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  targetUser User  @relation("AlertTarget", fields: [targetUserId], references: [id])
  supervisor User? @relation("AlertSupervisor", fields: [supervisorId], references: [id])
  admin      User? @relation("AlertAdmin", fields: [adminId], references: [id])

  @@index([targetUserId, status])
  @@index([supervisorId, status])
  @@map("compliance_alerts")
}

model GeorgiaComplianceRule {
  id         String   @id @default(uuid())
  ruleType   String // 'NOTE_SIGNATURE_DEADLINE', 'TREATMENT_PLAN_REVIEW', etc.
  ruleConfig Json // Configuration (e.g., { "deadlineDays": 7 })
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("georgia_compliance_rules")
}

model PerformanceGoal {
  id          String   @id @default(uuid())
  userId      String
  metricType  String // 'KVR', 'NO_SHOW_RATE', etc.
  targetValue Decimal  @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  status      String   @default("ACTIVE") // 'ACTIVE', 'ACHIEVED', 'MISSED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("PerformanceGoals", fields: [userId], references: [id])

  @@index([userId, status])
  @@map("performance_goals")
}

// ============================================================================
// PHASE 1.4: LEGAL ELECTRONIC SIGNATURES & ATTESTATIONS
// ============================================================================

model SignatureAttestation {
  id              String   @id @default(uuid())
  role            String // CLINICIAN, SUPERVISOR, ADMIN
  noteType        String // INTAKE, PROGRESS, TREATMENT_PLAN, etc.
  jurisdiction    String // State code (GA, FL, etc.)
  payerId         String? // Specific payer if needed
  attestationText String   @db.Text // Legal language
  isActive        Boolean  @default(true)
  effectiveDate   DateTime
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  signatureEvents SignatureEvent[] @relation("AttestationSignatureEvents")

  @@index([role, noteType, jurisdiction, isActive])
  @@map("signature_attestations")
}

model SignatureEvent {
  id            String               @id @default(uuid())
  noteId        String
  note          ClinicalNote         @relation("NoteSignatureEvents", fields: [noteId], references: [id])
  userId        String
  user          User                 @relation("UserSignatureEvents", fields: [userId], references: [id])
  signatureType String // AUTHOR, COSIGN, AMENDMENT
  attestationId String
  attestation   SignatureAttestation @relation("AttestationSignatureEvents", fields: [attestationId], references: [id])
  signedAt      DateTime             @default(now())
  ipAddress     String
  userAgent     String
  authMethod    String // PASSWORD, PIN, BIOMETRIC, MFA
  signatureData String? // Base64 image if drawn
  isValid       Boolean              @default(true)
  revokedAt     DateTime?
  revokedBy     String?
  revokedReason String?

  // Phase 1.5: Link to amendment if this is an amendment signature
  amendmentId String?        @unique
  amendment   NoteAmendment? @relation("AmendmentSignature", fields: [amendmentId], references: [id])

  @@index([noteId, signatureType])
  @@index([userId])
  @@map("signature_events")
}

// ============================================================================
// PHASE 1.5: AMENDMENT HISTORY SYSTEM
// ============================================================================

model NoteAmendment {
  id     String       @id @default(uuid())
  noteId String
  note   ClinicalNote @relation("NoteAmendments", fields: [noteId], references: [id])

  // Amendment metadata
  amendmentNumber Int // 1, 2, 3, etc. (sequential per note)
  reason          String // Why the amendment was made
  amendedBy       String
  amendingUser    User     @relation("UserAmendments", fields: [amendedBy], references: [id])
  amendedAt       DateTime @default(now())

  // What was changed
  fieldsChanged String[] // Array of field names that were modified
  changeSummary String // Human-readable summary of changes

  // Version snapshots
  previousVersion   NoteVersion? @relation("PreviousVersion", fields: [previousVersionId], references: [id])
  previousVersionId String?
  newVersion        NoteVersion? @relation("NewVersion", fields: [newVersionId], references: [id])
  newVersionId      String?

  // Signature requirement
  requiresSignature Boolean         @default(true)
  signatureEvent    SignatureEvent? @relation("AmendmentSignature")

  // Amendment status
  status String @default("PENDING") // PENDING, SIGNED, REJECTED

  // Compliance tracking
  ipAddress String
  userAgent String

  @@index([noteId, amendmentNumber])
  @@map("note_amendments")
}

model NoteVersion {
  id     String       @id @default(uuid())
  noteId String
  note   ClinicalNote @relation("NoteVersions", fields: [noteId], references: [id])

  // Version tracking
  versionNumber Int // 1, 2, 3, etc.
  createdAt     DateTime @default(now())
  createdBy     String
  creator       User     @relation("VersionCreator", fields: [createdBy], references: [id])

  // Snapshot of note content at this version
  noteData Json // Full snapshot of the clinical note data

  // What triggered this version
  versionType                String // ORIGINAL, EDIT, AMENDMENT, REVISION
  relatedAmendmentAsPrevious NoteAmendment[] @relation("PreviousVersion")
  relatedAmendmentAsNew      NoteAmendment[] @relation("NewVersion")

  @@index([noteId, versionNumber])
  @@map("note_versions")
}

// ============================================================================
// PHASE 2.1: PAYER POLICY ENGINE & BILLING READINESS
// ============================================================================

model Payer {
  id              String      @id @default(uuid())
  name            String
  payerType       String // COMMERCIAL, MEDICAID, MEDICARE, EAP, SELF_PAY
  requiresPreAuth Boolean     @default(false)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  rules           PayerRule[]

  @@index([payerType])
  @@index([isActive])
  @@map("payers")
}

model PayerRule {
  id      String @id @default(uuid())
  payerId String
  payer   Payer  @relation(fields: [payerId], references: [id], onDelete: Cascade)

  // Rule conditions
  clinicianCredential String // LMFT, LCSW, LPC, LAMFT, LAPC, etc.
  placeOfService      String // OFFICE, TELEHEALTH, HOME, etc.
  serviceType         String // PSYCHOTHERAPY, INTAKE, ASSESSMENT, etc.

  // Supervision requirements
  supervisionRequired        Boolean @default(false)
  cosignRequired             Boolean @default(false)
  incidentToBillingAllowed   Boolean @default(false)
  renderingClinicianOverride Boolean @default(false) // Bill under supervisor instead

  // Timeframe requirements
  cosignTimeframeDays Int? // Must cosign within X days
  noteCompletionDays  Int? // Must complete note within X days of session

  // Validation rules
  diagnosisRequired        Boolean @default(true)
  treatmentPlanRequired    Boolean @default(true)
  medicalNecessityRequired Boolean @default(true)
  priorAuthRequired        Boolean @default(false)

  // Disallowed scenarios
  isProhibited      Boolean @default(false) // This combination is not allowed
  prohibitionReason String? // Why this combination is prohibited

  // Effective dates
  effectiveDate   DateTime
  terminationDate DateTime?
  isActive        Boolean   @default(true)

  // Metadata
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdBy    String?
  billingHolds BillingHold[]

  @@index([payerId])
  @@index([clinicianCredential])
  @@index([serviceType])
  @@index([isActive])
  @@index([effectiveDate, terminationDate])
  @@map("payer_rules")
}

model BillingHold {
  id          String       @id @default(uuid())
  noteId      String
  note        ClinicalNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  holdReason  String // MISSING_COSIGN, PAYER_RULE_VIOLATION, MISSING_DIAGNOSIS, etc.
  holdDetails String       @db.Text // Detailed explanation of the hold

  // Related payer rule (if applicable)
  payerRuleId String?
  payerRule   PayerRule? @relation(fields: [payerRuleId], references: [id], onDelete: SetNull)

  // Hold tracking
  holdPlacedAt DateTime  @default(now())
  holdPlacedBy String // "SYSTEM" or userId
  resolvedAt   DateTime?
  resolvedBy   String?
  isActive     Boolean   @default(true)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([noteId])
  @@index([isActive])
  @@index([holdReason])
  @@index([holdPlacedAt])
  @@map("billing_holds")
}
